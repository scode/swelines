= Swelines - Software Engineering Guidelines
WORK IN PROGRESS - not yet intended for consumption
:toc:

These are a set of *opinionated* guidelines for software engineering
heavily biased towards my anecdotal experiences writing code in the
industry, at companies of varying sizes. The goal is to produce more
sustainable and maintainable code in the context of long lived code
bases in an organization of non-trivial size, where individuals come
and go over time.

Think of them as your typical "coding guidlines", except instead of
focusing on style issues and specific rules of a language or
environment, it focues on somewhat more general principles that
generally span many languages and environments.

I try to articulate a somewhat general idea, and provide near-to-real
life practical examples to concretize.

This is intended to be a living document, but the SWEL-NNN "keys" are
intended to remain fixed. Their contents may evolve over time, but
never completely change topic. Some may be de-commissioned over time.

I do not claim that there are in any way unique. Rather, it's a
curated set of opinions that, if more generally adherred to, I believe
would be helpful - especially to larger organizations.

There is no particular order to these entries.

Suggested changes and discussion is welcome as github tickets or pull
requests. But keep in mind that at least for now, ultimately this is
reflecting my opinions. If I cannot be convinced of a change, I may
still be convinced to include a dissenting opinion in this document.

== SWEL-1 - Careful what you depend on

== SWEL-2 - Don't break the abstraction

== SWEL-3 - Why you shouldn't use X

== SWEL-4 - Quality commit messages

Commit messages should tell the reader not only *what* was done, but
*why* it was done (when not obvious). Additional context on a
case-by-case basis should be provided. One might imagine addressing
the commit message to a future version of yourself a couple of years
down the road, who is investigating a bug, and is trying to determine
why something was done the way it was done.

Simply stating *what* the change does is better than nothing because
it allows you to tell at a glance what the change does without
carefully reading a diff. Stating *why* it was done, gives you
additional information that you generally cannot tell from the diff -
especially if someone other than the author of the change is reading
about it months or years down the line.

It can also help code review (which should contain a similar
description). It allows reviewers to follow the *reasoning* behind the
change which helps to evaluate whether the proposed change is a good
solution to the problem at hand.

To exemplify, let us suppose a change that adds a dependency exclusion
to a project as a result of a problem that was discovered in
production.

This would be a horrible commit message that is close to useless:

.....
Fix build file.
.....

Slightly better but still bad:

.....
Exclude transitive dependency XXX.
.....

Somewhat reasdonable commit message:

.....
Exclude transitive dependency XXX.

XXX is pulled in incorrectly by YYY and conflicts with ZZZ, causing
a runtime failure due to a NoSuchMethodException.
.....

Better commit message:

.....
INCIDENT-NNN - Exclude transitive dependency XXX.

Incident INCIDENT-NNN was caused by a runtime failure on rolling restart
of service SSS.

The failure, a NoSuchMethodError for foo.bar.TheMethod, was caused by
YYY (a transitive dependency of ours) pulling in version 123 of XXX -
which conflicts with ZZZ which is also a dependency of ours.

BUILD-NNN has been filed to fix the incorrect dependency declared by XXX. In
the mean time, this avoids the issue in this service.
.....

This version of the commit message provides several useful pieces of
*context* to the future reader:

* Why was the change made?
* Given that the change introduces what could be considered code smell
  (dependency exclusion), is this the permanent fix or is there a better
  fix on the way? In this case, the ticket BUILD-NNN can be referred to
  for the latest status of it.
* What was the motivation for the change? It broke in production, with details
  presumably available in the INCIDENT-NNN ticket.
* The author of the change identified the source of the conflict, rather
  than just arriving at the "fix" by trial and error. This eases the processes
  of determining whether it is currently safe to avoid the exclusion (such as by
  checking if XXX is still buggy) - even if the BUILD-NNN ticket was left
  without action.

Be kind to future maintainers of your code.

== SWEL-5 - Never, ever, silently fail

== SWEL-6 - Limit propagation of bugs

== SWEL-7 - Assume everything is broken

== SWEL-8 - Be explicit and narrow in what you accept
